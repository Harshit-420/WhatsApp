const { makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const fs = require('fs');
const pino = require('pino');
const readline = require('readline');
const os = require('os');
const crypto = require('crypto');
const schedule = require('node-schedule');

const { sendSMS } = require('./sms');
const { Message } = require('./db');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise(resolve => rl.question(query, resolve));

const color = (text, colorCode) => `\x1b[${colorCode}m${text}\x1b[0m`;

const banner = () => {
  console.clear();
  console.log(color("‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó", "32"));
  console.log(color("‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó", "35"));
  console.log(color("‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù", "34"));
  console.log(color("‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù", "33"));
  console.log(color("‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ", "36"));
  console.log(color(" ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù", "37"));
  console.log(color("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó", "32"));
  console.log(color("‚ïë  TOOLS       : WHATSAPPüî• LOD3R                  ", "33"));
  console.log(color("‚ïë  RULL3X     : T3RG3T WHATSSP NUMB3R", "31"));
  console.log(color("‚ïë  V3RSO1N  : WHATSSP 2.376", "34"));
  console.log(color("‚ïë  ONW3R      : MR RAJ THAKUR L3G3ND", "36"));
  console.log(color("‚ïë  GitHub     : https://github.com/Raj-Thakur420", "35"));
  console.log(color("‚ïë  WH9TS9P    : +9695003501", "32"));
  console.log(color("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù", "33"));
};

const autoSeeStatuses = async (socket) => {
  socket.ev.on("presence.update", async (presence) => {
    if (presence.status === "available") {
      const chat = presence.id.split("@")[0];
      await socket.sendMessage(chat + "@s.whatsapp.net", { text: "Seen" });
    }
  });
};

const sendMessageAndLog = async (socket, recipient, text, method = 'whatsapp') => {
  try {
    await socket.sendMessage(recipient, { text });
    console.log(color(`[‚úî] ${recipient} ‡§™‡§∞ WhatsApp ‡§∏‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ`, "32"));
    // MongoDB ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó ‡§ï‡§∞‡•á‡§Ç
    await Message.create({ recipient, message: text, status: 'sent', method: 'whatsapp' });
  } catch (error) {
    console.log(color(`[‚úñ] ${recipient} ‡§™‡§∞ WhatsApp ‡§∏‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤, GSM ‡§ü‡•ç‡§∞‡§æ‡§á ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...`, "31"));
    await Message.create({ recipient, message: text, status: 'failed', method: 'whatsapp' });
    try {
      // GSM SMS ‡§ï‡•á ‡§ú‡§∞‡§ø‡§è ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç (‡§®‡§Ç‡§¨‡§∞ ‡§∏‡•á '@c.us' ‡§π‡§ü‡§æ‡§ï‡§∞)
      const gsmResult = await sendSMS(recipient.replace('@c.us', ''), text);
      console.log(color(`[‚úî] ${gsmResult} ${recipient} ‡§™‡§∞ GSM ‡§ï‡•á ‡§ú‡§∞‡§ø‡§è`, "32"));
      await Message.create({ recipient, message: text, status: 'sent', method: 'gsm' });
    } catch (gsmError) {
      console.log(color(`[‚úñ] ${recipient} ‡§™‡§∞ GSM SMS ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ${gsmError}`, "31"));
      await Message.create({ recipient, message: text, status: 'failed', method: 'gsm' });
    }
  }
};

const startMessaging = async (socket) => {
  banner();
  let targetNumbers = [];
  let targetGroups = [];
  
  const option = await question(color("[1] TARGET NUMBER ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç\n[2] WHATSAPP GROUP ‡§™‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç\n‡§Ö‡§™‡§®‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç: ", "36"));
  
  if(option.trim() === '1') {
    const count = await question(color("‡§ï‡§ø‡§§‡§®‡•á target ‡§®‡§Ç‡§¨‡§∞? ", "32"));
    for(let i = 0; i < parseInt(count); i++){
      const number = await question(color(`Target number ${i+1} ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `, "34"));
      targetNumbers.push(number.trim());
    }
  } else if(option.trim() === '2'){
    // WhatsApp ‡§ó‡•ç‡§∞‡•Å‡§™‡•ç‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    const groups = await socket.groupFetchAllParticipating();
    const groupIDs = Object.keys(groups);
    console.log(color("WhatsApp Groups:", "35"));
    groupIDs.forEach((gid, index) => {
      console.log(color(`[${index+1}] ${groups[gid].subject} (UID: ${gid})`, "33"));
    });
    const count = await question(color("‡§ï‡§ø‡§§‡§®‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•à? ", "36"));
    for(let i = 0; i < parseInt(count); i++){
      const groupID = await question(color(`Group UID ${i+1} ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: `, "32"));
      targetGroups.push(groupID.trim());
    }
  } else {
    console.log(color("‡§ó‡§≤‡§§ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•§ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡§Ç‡§¶ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...", "31"));
    process.exit(1);
  }
  
  // ‡§Æ‡•à‡§∏‡•á‡§ú ‡§´‡§æ‡§á‡§≤ ‡§∏‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§™‡§¢‡§º‡•á‡§Ç
  const filePath = await question(color("‡§Æ‡•à‡§∏‡•á‡§ú ‡§´‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§™‡§æ‡§• ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: ", "35"));
  let messages = fs.readFileSync(filePath.trim(), "utf-8").split("\n").filter(Boolean);
  
  const senderName = await question(color("Sender Name ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (personalization ‡§ï‡•á ‡§≤‡§ø‡§è): ", "36"));
  const delaySeconds = parseInt(await question(color("‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§°‡§ø‡§≤‡•á (seconds ‡§Æ‡•á‡§Ç) ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: ", "32")));
  
  console.log(color("‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...", "34"));
  
  // ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§Ø‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç
  const scheduleTime = await question(color("‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ü‡§æ‡§á‡§Æ (HH:MM) ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§ñ‡§æ‡§≤‡•Ä ‡§õ‡•ã‡§°‡§º‡•á‡§Ç: ", "35"));
  
  const processMessages = async () => {
    for(let msg of messages){
      const personalizedMsg = senderName + " " + msg;
      if(targetNumbers.length > 0){
        for(let num of targetNumbers){
          await sendMessageAndLog(socket, num + "@c.us", personalizedMsg);
          await new Promise(res => setTimeout(res, delaySeconds * 1000));
        }
      } else if(targetGroups.length > 0){
        for(let gid of targetGroups){
          await sendMessageAndLog(socket, gid + "@g.us", personalizedMsg);
          await new Promise(res => setTimeout(res, delaySeconds * 1000));
        }
      }
    }
  };
  
  if(scheduleTime.trim()){
    const [hour, minute] = scheduleTime.split(":").map(Number);
    const now = new Date();
    const scheduledDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, minute, 0);
    if(scheduledDate < now){
      scheduledDate.setDate(scheduledDate.getDate() + 1);
    }
    console.log(color(`‡§Æ‡•à‡§∏‡•á‡§ú ${scheduledDate} ‡§™‡§∞ ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à`, "36"));
    schedule.scheduleJob(scheduledDate, processMessages);
  } else {
    processMessages();
  }
};

const startWhatsApp = async () => {
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info');
  
  const socket = makeWASocket({
    auth: state,
    logger: pino({ level: 'silent' })
  });
  
  if (!socket.authState.creds.registered) {
    banner();
    const phone = await question(color("‡§Ö‡§™‡§®‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç: ", "36"));
    const pairingCode = await socket.requestPairingCode(phone.trim());
    banner();
    console.log(color(`‡§Ü‡§™‡§ï‡§æ pairing code ‡§π‡•à: ${pairingCode}`, "32"));
  }
  
  socket.ev.on("connection.update", async (update) => {
    const { connection, lastDisconnect } = update;
    if(connection === "open"){
      banner();
      console.log(color("WhatsApp ‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡§´‡§≤!", "32"));
      autoSeeStatuses(socket);
      startMessaging(socket);
    }
    
    if(connection === "close"){
      const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
      if(shouldReconnect){
        console.log(color("‡§™‡•Å‡§®: ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...", "33"));
        setTimeout(startWhatsApp, 5000);
      } else {
        console.log(color("‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ó‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ï‡•ã ‡§∞‡§ø‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§", "31"));
        process.exit(1);
      }
    }
  });
  
  socket.ev.on("creds.update", saveCreds);
};

startWhatsApp();

process.on('exit', () => {
  console.log(color("‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§ó‡•Ä‡•§", "36"));
  setTimeout(startWhatsApp, 5000);
});
